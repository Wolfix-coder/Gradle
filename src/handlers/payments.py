from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from model.payments import Payments
from services.database_service import DatabaseService
from services.payment_service import PaymentService
from utils.decorators import require_admin
from utils.keyboards import get_user_pay_keyboard
from utils.logging import logger

from config import Config
from text import help_text

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä
user_payments_router = Router()
admin_payments_router = Router()

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤
database_service = DatabaseService()
payment_service = PaymentService()

# –ö–æ–º–∞–Ω–¥–∞ /pay –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@user_payments_router.message(Command("pay"))
async def user_pay_command(message: types.Message):
    "–ö–æ–º–∞–¥–Ω–∞ /pay –∑ –±–æ–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"

    await message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–æ—é –∑–∞–º–æ–≤–ª–µ–Ω—å\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:",
        reply_markup=get_user_pay_keyboard().as_markup()
    )

@user_payments_router.callback_query(F.data == "unpaid_order")
async def show_unpaid_order(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."""
    try:
        client_id = callback.from_user.id

        unpaid_payments = await payment_service.get_unpaid_orders(client_id, 0)
         

        if not unpaid_payments:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_home")
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ–º–∞—î –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
                reply_markup=keyboard.as_markup()
            )
            return
        
        await callback.message.delete()
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É –ø–ª–∞—Ç–µ–∂—É —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–∫—Ä–µ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        for payment in unpaid_payments:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data=f"pay_order_{payment.ID_order}")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_home")
            keyboard.adjust(2, 1)

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É
            payment_status = "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ" if int(payment.status) == 0 else "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ"
            order = await database_service.get_by_id('order_request', 'ID_order', payment.ID_order)

            payment_text = (
                f"üìå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{payment.ID_order}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {order.subject}\n"
                f"üìù –¢–∏–ø —Ä–æ–±–æ—Ç–∏: {order.type_work}\n"
                f"üí∞ –¶—ñ–Ω–∞: {payment.price} –≥—Ä–Ω\n"
                f"üí≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: {payment_status}\n"
                f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {order.created_at}\n"
            )
                    
            await callback.message.answer(
                payment_text,
                reply_markup=keyboard.as_markup()
            )

    except Exception as e:
        logger.error(f"Error showing unpaid orders: {e}")
        await callback.message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
            reply_markup=get_user_pay_keyboard().as_markup()
        )

@user_payments_router.callback_query(F.data == "back_to_home")
async def back_home (callback: CallbackQuery) -> None:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (/help)"""
    try:
        await callback.message.answer(help_text, reply_markup=types.ReplyKeyboardRemove())
    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —é–∑–µ—Ä–∞: {e}")
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –Ω–∞–∑–∞–¥. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help.")

@user_payments_router.callback_query(F.data.startswith("pay_order_"))
async def pay_order(callback: CallbackQuery) -> None:
    """–ü—Ä–æ—Ü–µ—Å –æ–ø–ª–∞—Ç–∏"""
    try:
        await callback.answer()

        order_id = str(callback.data.split('_', 2)[2])  # –í–∏—Ç—è–≥ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏
        

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ–ª—è –ë–î –∑–∞ –∫–ª—é—á–µ–º order_id
        payment = await database_service.get_by_id('payments', 'ID_order', order_id)

        if not payment:
            logger.warning(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –æ–ø–ª–∞—Ç–∏")
            await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É - —è–∫—â–æ —Å—Ç–∞—Ç—É—Å –Ω–µ 0 (–Ω–µ–æ–ø–ª–∞—á–µ–Ω–æ), —Ç–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ
        if int(payment.status) != 0:
            logger.info(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ.")
            await callback.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ.", show_alert=True)
            return
            
        try:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–û–ø–ª–∞—Ç–∏—Ç–∏", callback_data=f"paid_{payment.ID_order}")

            money = payment.price - payment.paid
            
            await callback.message.answer(
                text=(
                    f"üí≥ <b>–û–ø–ª–∞—Ç–∞</b>\n\n"
                    f"–ü–µ—Ä–µ–≤–µ–¥—ñ—Ç—å <b>{money} –≥—Ä–Ω</b> –Ω–∞ –∫–∞—Ä—Ç–∫—É:\n"
                    f"<code>{Config.PAYMENT_TOKEN}</code>\n\n"
                    f"–ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –∫–æ—à—Ç—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
                    f"<i>–î–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–µ—ó.</i>"
                ),
                parse_mode="HTML",
                reply_markup=keyboard.as_markup()
            )

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ—Ü–µ—Å—É –æ–ø–ª–∞—Ç–∏: {e}")
            await callback.message.answer()
    
    except ValueError:
        logger.error(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç order_id: {callback.data}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –≤ –Ω–æ–º–µ—Ä—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", show_alert=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–ø–ª–∞—Ç–∏: {e}")
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–ø–ª–∞—Ç–∏.", show_alert=True)

@user_payments_router.callback_query(F.data.startswith("paid_"))
async def notify_admin_about_payment(callback: CallbackQuery) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É –æ–ø–ª–∞—Ç—É"""
    try:
        user_id = callback.from_user.id
        order_id = str(callback.data.split('_', 1)[1])  # –í–∏—Ç—è–≥ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ–ª—è –∑–∞ order_id
        order = await database_service.get_by_id('order_request', 'ID_order', order_id)
        payment = await database_service.get_by_id('payments', 'ID_order', order_id)

        money = payment.price - payment.paid

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{order_id}")
        keyboard.button(text="–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{order_id}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await callback.answer()
        await callback.bot.send_message(
            text=(
                f"üßæ –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –æ–ø–ª–∞—Ç–∏\n\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <code>{user_id}</code>\n"
                f"üÜî –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: <b>{order_id}</b>\n"
                f"üí∞ –°—É–º–∞: <b>{money} –≥—Ä–Ω</b>\n\n"
                f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ–ø–ª–∞—Ç—É –π –ø—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –≤—Ä—É—á–Ω—É."
            ),
            chat_id=int(order.ID_worker),
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏: {e}")
        await callback.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∫–æ–º–∞–Ω–¥–æ—é /support.", show_alert=True)

@user_payments_router.callback_query(F.data.startswith("confirm_"))
async def confirm_pay(callback: CallbackQuery) -> None:
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ —Å–ø–ª–∞—Ç—É"""
    try:
        await callback.answer()

        # –í–∏—Ç—è–≥ id –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ callback –∑–∞–ø–∏—Ç—É  
        order_id = callback.data.split('_', 1)[1]

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        payment = await database_service.get_by_id('payments', 'ID_order', order_id)
        order = await database_service.get_by_id('order_request', 'ID_order', order_id)

        if not payment and not order:
            await callback.message.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        if payment.status != 0:
            await callback.message.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ")
            return

        # –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ –æ–ø–ª–∞—á–µ–Ω–µ
        success = await payment_service.mark_confirm_pay(order_id)

        if success == True:
            logger.info(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –æ–ø–ª–∞—á–µ–Ω–æ.")
            await callback.message.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –æ–ø–ª–∞—á–µ–Ω–æ.")  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
            
            await callback.bot.send_message(
                chat_id=order.ID_user, 
                text=f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ."  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            )
        else:
            await callback.message.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}.")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –æ–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}: {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É.")