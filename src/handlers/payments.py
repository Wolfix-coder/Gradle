from aiogram import Router, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from model.payments import Payments
from services.database import DatabaseService
from services.payment_service import PaymentService
from utils.decorators import require_admin
from utils.keyboards import get_user_pay_keyboard
from utils.logging import logger

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä
payments_router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /pay –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@payments_router.message(Command("pay"))
async def user_pay_command(message: types.Message):
    "–ö–æ–º–∞–¥–Ω–∞ /pay –∑ –±–æ–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"

    await message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–æ—é –∑–∞–º–æ–≤–ª–µ–Ω—å\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:",
        reply_markup=get_user_pay_keyboard().as_markup()
    )

@payments_router.callback_query(F.data == "unpaid_order")
async def show_unpaid_order(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."""
    try:
        payment_service = PaymentService()
        unpaid_payments = await payment_service.get_unpaid_orders()

        if not unpaid_payments:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_home")
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ–º–∞—î –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
                reply_markup=keyboard.as_markup()
            )
            return
        
        await callback.message.delete()
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É –ø–ª–∞—Ç–µ–∂—É —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–∫—Ä–µ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        for payment in unpaid_payments:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data=f"pay_order_{payment.ID_order}")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_home")
            keyboard.adjust(2, 1)

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É
            payment_status = "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ" if payment.status == 0 else "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ"
                    
            payment_text = (
                f"üìå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{payment.ID_order}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {payment.subject}\n"
                f"üìù –¢–∏–ø —Ä–æ–±–æ—Ç–∏: {payment.type_work}\n"
                f"üí∞ –¶—ñ–Ω–∞: {payment.price} –≥—Ä–Ω\n"
                f"üí≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: {payment_status}\n"
                f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {payment.created_at}\n"
            )
                    
            await callback.message.answer(
                payment_text,
                reply_markup=keyboard.as_markup()
            )

    except Exception as e:
        logger.error(f"Error showing unpaid orders: {e}")
        await callback.message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
            reply_markup=get_user_pay_keyboard().as_markup()
        )