import aiosqlite
from aiogram import Router, types, F

from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.fsm.context import FSMContext


from services.database_service import DatabaseService
from states.user_states import UserState
from utils.validators import validate_input, validate_course
from utils.logging import logger

from text import support_url
from config import Config

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
MAX_NAME_LENGTH = 50
MAX_COMMENT_LENGTH = 500
MAX_GROUP_LENGTH = 10
ALLOWED_COURSES = ['1', '2', '3', '4']

router = Router()

database_service = DatabaseService()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        phone_button = KeyboardButton(text="–ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
        phone_keyboard = ReplyKeyboardMarkup(
            keyboard=[[phone_button]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –Ω–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Å–æ–≤–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=phone_keyboard
        )
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.content_type == ContentType.CONTACT)
async def handle_contact(message: types.Message, state: FSMContext):
    try:
        contact = message.contact
        user = message.from_user

        if await database_service.get_by_id('user_data', 'ID', 'user.id'):
            help_markup = ReplyKeyboardBuilder()
            help_markup.row(types.KeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞"))
            await message.answer(
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user.username} –≤–∂–µ —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.\n"
                f"–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.", 
                reply_markup=help_markup.as_markup(resize_keyboard=True)
            )
            return

        await state.update_data(contact=contact, user=user)
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ.")
        await state.set_state(UserState.waiting_for_real_full_name)
    except Exception as e:
        logger.error(f"Error handling contact: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(UserState.waiting_for_real_full_name)
async def get_full_name(message: Message, state: FSMContext):
    name = validate_input(message.text, MAX_NAME_LENGTH)
    if not name:
        await message.answer(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–º–∞–∫—Å–∏–º—É–º {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    
    await state.update_data(full_name=name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ.")
    await state.set_state(UserState.waiting_for_patronymic)

@router.message(UserState.waiting_for_patronymic)
async def get_patronymic(message: types.Message, state: FSMContext):
    patronymic = validate_input(message.text, MAX_NAME_LENGTH)
    if not patronymic:
        await message.answer(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–º–∞–∫—Å–∏–º—É–º {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤)")
        return

    await state.update_data(patronymic=patronymic)
    education_markup = ReplyKeyboardBuilder()
    education_markup.row(
        types.KeyboardButton(text="–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–π—Å—å–∫–∏–π –ü–æ–ª—ñ—Ç–µ—Ö"),
        types.KeyboardButton(text="–Ü–Ω—à–µ")
    )
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ü–µ –Ω–∞–≤—á–∞–Ω–Ω—è.", 
        reply_markup=education_markup.as_markup(resize_keyboard=True)
    )
    await state.set_state(UserState.waiting_for_education_place)

@router.message(UserState.waiting_for_education_place)
async def get_education_place(message: types.Message, state: FSMContext):
    if message.text == "–Ü–Ω—à–µ":
        education_markup = ReplyKeyboardBuilder()
        education_markup.row(
            types.KeyboardButton(text="–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–π—Å—å–∫–∏–π –ü–æ–ª—ñ—Ç–µ—Ö"),
            types.KeyboardButton(text="–Ü–Ω—à–µ")
        )
        education_markup.row(
            types.KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –∑–∞–∫–ª–∞–¥—É")
        )
        await message.answer(
            "–í–∏ –≤–∏–±—Ä–∞–ª–∏ '–Ü–Ω—à–µ'. –í–∏ –º–æ–∂–µ—Ç–µ:\n"
            "1. –ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏\n"
            "2. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª–∞–¥—É",
            reply_markup=education_markup.as_markup(resize_keyboard=True)
        )
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞",
            url=support_url
        ))
        await message.answer(
            "–Ø–∫—â–æ –≤ —Å–ø–∏—Å–∫—É –Ω–µ–º–∞—î –≤–∞—à–æ–≥–æ –∑–∞–∫–ª–∞–¥—É –æ—Å–≤—ñ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–∞—Å üëá",
            reply_markup=builder.as_markup()
        )
        return
    
    elif message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –∑–∞–∫–ª–∞–¥—É":
        education_markup = ReplyKeyboardBuilder()
        education_markup.row(
            types.KeyboardButton(text="–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–π—Å—å–∫–∏–π –ü–æ–ª—ñ—Ç–µ—Ö"),
            types.KeyboardButton(text="–Ü–Ω—à–µ")
        )
        await message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ü–µ –Ω–∞–≤—á–∞–Ω–Ω—è:", 
            reply_markup=education_markup.as_markup(resize_keyboard=True)
        )
        return

    elif message.text == "–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–π—Å—å–∫–∏–π –ü–æ–ª—ñ—Ç–µ—Ö":
        await state.update_data(education_place=message.text)
        course_markup = ReplyKeyboardBuilder()
        course_markup.row(
            *[types.KeyboardButton(text=str(i)) for i in range(1, 5)]
        )
        await message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –Ω–∞ —è–∫–æ–º—É –≤–∏ –Ω–∞–≤—á–∞—î—Ç–µ—Å—å:",
            reply_markup=course_markup.as_markup(resize_keyboard=True)
        )
        await state.set_state(UserState.waiting_for_course)
    
    else:
        education_markup = ReplyKeyboardBuilder()
        education_markup.row(
            types.KeyboardButton(text="–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–π—Å—å–∫–∏–π –ü–æ–ª—ñ—Ç–µ—Ö"),
            types.KeyboardButton(text="–Ü–Ω—à–µ")
        )
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª–∞–¥—É:", 
            reply_markup=education_markup.as_markup(resize_keyboard=True)
        )

@router.message(UserState.waiting_for_course)
async def get_course(message: types.Message, state: FSMContext):
    if not validate_course(message.text):
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –∫—É—Ä—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –∑—ñ —Å–ø–∏—Å–∫—É.")
        return

    await state.update_data(course=message.text)
    
    groups = {
        "1": ["–ü–ö-251", "–ü–ö-252", "–ö–°-251", "–û–ú-251", "–†–ê-251", "–†–ê-252", "–ê–í-251", "–ê–ü-251"],
        "2": ["–ü–ö-241", "–ü–ö-242", "–ö–°-241", "–û–ú-241", "–†–ê-241", "–†–ê-242", "–ê–í-241", "–ê–ü-241"],
        "3": ["–ü–ö-231", "–ü–ö-232", "–ö–°-231", "–û–ú-231", "–†–ê-231", "–†–ê-232", "–ê–í-231", "–ê–ü-231"],
        "4": ["–ü–ö-221", "–ü–ö-222", "–ö–°-221", "–û–ú-221", "–†–ê-221", "–†–ê-222", "–ê–í-221", "–ê–ü-221"]
    }
    
    group_markup = ReplyKeyboardBuilder()
    current_groups = groups[message.text]
    for i in range(0, len(current_groups), 4):
        group_markup.row(*[types.KeyboardButton(text=group) for group in current_groups[i:i+4]])
    
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É.",
        reply_markup=group_markup.as_markup(resize_keyboard=True)
    )
    await state.set_state(UserState.waiting_for_group)

@router.message(UserState.waiting_for_group)
async def get_group(message: Message, state: FSMContext):
    try:
        group = validate_input(message.text, MAX_GROUP_LENGTH)
        if not group:
            await message.answer(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≥—Ä—É–ø–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–º–∞–∫—Å–∏–º—É–º {MAX_GROUP_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤)")
            return

        user_data = await state.get_data()
        user = message.from_user
        
        async with aiosqlite.connect(Config.DATABASE_PATH) as db:
            await db.execute(
                '''INSERT INTO user_data (
                    ID, user_name, user_link, real_full_name, for_father,
                    education, course, edu_group, phone_number, language_code
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                (
                    user.id,
                    f"{user.first_name} {user.last_name or ''}".strip() or user.username or "Unknown",
                    user.username,
                    user_data['full_name'],
                    user_data['patronymic'],
                    user_data['education_place'],
                    user_data['course'],
                    group,
                    user_data['contact'].phone_number,
                    user_data['user'].language_code
                )
            )
            await db.commit()
        
        await message.answer(
            "–í–∞—à—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
            reply_markup=types.ReplyKeyboardRemove()
        )

        help_markup = ReplyKeyboardBuilder()
        help_markup.row(types.KeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞"))
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É \"–î–æ–ø–æ–º–æ–≥–∞\", —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:",
            reply_markup=help_markup.as_markup(resize_keyboard=True)
        )
        await state.clear()
        
    except aiosqlite.Error as e:
        logger.error(f"Database error while saving user data: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as e:
        logger.error(f"Unexpected error in get_group: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
