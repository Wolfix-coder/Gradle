import aiosqlite
import logging
from datetime import datetime

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

from model.order import OrderStatus
from services.database_service import DatabaseService
from services.order_service import OrderService
from states.order_states import OrderStates
from utils.logging import logger
from utils.decorators import require_admin
from utils.keyboards import get_worker_order_keyboard, subject_keyboard, type_work_keyboard
from utils.validators import validate_input

from config import Config
from text import type_work_text

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä
users_orders_router = Router()
admin_orders_router = Router()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å
database_service = DatabaseService()
order_service = OrderService()


@admin_orders_router.callback_query(F.data == "new_orders")
@require_admin
async def show_new_orders(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."""
    try:
        orders = await database_service.get_all_by_field('order',)
        
        if not orders:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ–º–∞—î –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
                reply_markup=keyboard.as_markup()
            )
            return

        await callback.message.delete()

        for order in orders:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úÖ –í–∑—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"take_order_{order.ID_order}")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            keyboard.adjust(1)

            order_text = (
                f"üìå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.ID_order}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {order.subject}\n"
                f"üìù –¢–∏–ø —Ä–æ–±–æ—Ç–∏: {order.type_work}\n"
                f"üìã –î–µ—Ç–∞–ª—ñ: {order.order_details}\n"
                f"üë§ –ó–∞–º–æ–≤–Ω–∏–∫: @{order.user_link}\n"
                f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {order.created_at}"
            )

            await callback.message.answer(order_text, reply_markup=keyboard.as_markup())

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {e}")
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        await callback.message.edit_text(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
            reply_markup=keyboard.as_markup()
        )

@admin_orders_router.callback_query(lambda c: c.data == "my_orders")
@require_admin
async def handle_my_orders(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞."""
    await show_worker_orders_handler(callback)

@admin_orders_router.callback_query(lambda c: c.data == "refresh_worker_orders")
@require_admin
async def handle_refresh_orders(callback: CallbackQuery):
    """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞."""
    await show_worker_orders_handler(callback)

@admin_orders_router.callback_query(F.data.startswith("take_order_"))
@require_admin
async def take_order(callback: CallbackQuery) -> None:
    """–û–±—Ä–æ–±–ª—è—î –≤–∑—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ callback –¥–∞–Ω–∏—Ö
        order_id = callback.data.split('_', 2)[2] # –í–∏—Ç—è–≥ –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        worker_id = callback.from_user.id # –í–∏—Ç—è–≥ ID –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ —è–∫–∏–π –Ω–∞—Ç–∏—Å–Ω—É–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É
        worker_username = callback.from_user.username or '–±–µ–∑_—ñ–º–µ–Ω—ñ' # –í–∏—Ç—è–≥ —ñ–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞

        # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É DatabaseService
        database_service = DatabaseService()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å
        order = await database_service.get_by_id(order_id)
        
        if not order:
            logger.warning(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –≤–∑—è—Ç—Ç—è")
            await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
            
        if order.status != 1:
            "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
            logger.info(f"–°–ø—Ä–æ–±–∞ –≤–∑—è—Ç–∏ –≤–∂–µ –≤–∑—è—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {worker_id}")
            await callback.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∑—è—Ç–æ —ñ–Ω—à–∏–º –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º.", show_alert=True)
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É OrderService
        order_service = OrderService()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
        success = await order_service.in_progress_order(
            order_id=order_id,
            worker_id=worker_id
        )
        
        if not success:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}")
            await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∑—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìã –ú–æ—ó –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="my_orders")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        keyboard.adjust(1)  # –†–æ–∑–º—ñ—â—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–≤–ø—á–∏–∫

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –≤–∑—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∑—è—Ç–æ –≤ —Ä–æ–±–æ—Ç—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{worker_username}!",
            reply_markup=keyboard.as_markup()
        )
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –≤–∑—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∑—è—Ç–æ!", show_alert=True)
        
        logger.info(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} —É—Å–ø—ñ—à–Ω–æ –≤–∑—è—Ç–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {worker_id} (@{worker_username})")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {e}", exc_info=True)
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)      

async def get_worker_orders(worker_id: int) -> list:
    """
    –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    
    Args:
        worker_id (int): ID –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å
    """
    try:
        async with aiosqlite.connect(Config.DATABASE_PATH) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute("""
                SELECT 
                    o.ID_order,
                    o.subject,
                    o.type_work,
                    o.order_details,
                    o.created_at,
                    o.status,
                    u.user_name,
                    u.user_link
                FROM order o
                LEFT JOIN user_data u ON o.ID_user = u.ID
                WHERE o.ID_worker = ? 
                AND o.status IN (?, ?)
                ORDER BY 
                    CASE o.status 
                        WHEN ? THEN 1 
                        WHEN ? THEN 2 
                    END,
                    o.created_at DESC
            """, (worker_id, 
                  OrderStatus.IN_PROGRESS.value,
                  OrderStatus.NEW.value,
                  OrderStatus.IN_PROGRESS.value,
                  OrderStatus.NEW.value)) as cursor:
                return [dict(row) for row in await cursor.fetchall()]
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –≤–æ—Ä–∫–µ—Ä–∞: {e}")
        return []

async def show_worker_orders_handler(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞."""
    try:
        worker_id = callback.from_user.id
        orders = await get_worker_orders(worker_id)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_worker_orders")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        keyboard.adjust(1)

        if not orders:
            try:
                # –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                await callback.message.edit_text(
                    "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
                    reply_markup=keyboard.as_markup()
                )
            except TelegramBadRequest as e:
                # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                if "message is not modified" in str(e):
                    await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å", show_alert=True)
                else:
                    # –Ø–∫—â–æ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ
                    await callback.message.delete()
                    await callback.message.answer(
                        "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
                        reply_markup=keyboard.as_markup()
                    )
            return

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –Ω–æ–≤–∏—Ö
        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        for order in orders:
            order_text = (
                f"üìå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order['ID_order']}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {order['subject']}\n"
                f"üìù –¢–∏–ø —Ä–æ–±–æ—Ç–∏: {order['type_work']}\n"
                f"üë§ –ó–∞–º–æ–≤–Ω–∏–∫: @{order['user_link']}\n"
                f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {order['created_at']}\n"
                f"üìã –î–µ—Ç–∞–ª—ñ: {order['order_details']}\n"
                f"–°—Ç–∞—Ç—É—Å: {'üîÑ –í —Ä–æ–±–æ—Ç—ñ' if order['status'] == OrderStatus.IN_PROGRESS.value else 'üÜï –ù–æ–≤–µ'}"
            )
            
            order_keyboard = get_worker_order_keyboard(order['ID_order'])
            order_keyboard.button(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_worker_orders")
            order_keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            order_keyboard.adjust(1)
            
            await callback.message.answer(
                order_text,
                reply_markup=order_keyboard.as_markup()
            )

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –≤–æ—Ä–∫–µ—Ä–∞: {e}", exc_info=True)
        try:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            await callback.message.edit_text(
                "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å.",
                reply_markup=keyboard.as_markup()
            )
        except Exception as edit_error:
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, —Å–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            logger.error(f"–î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {edit_error}")
            await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å", show_alert=True)

@admin_orders_router.callback_query(F.data.startswith("send_work_"))
async def send_work_to_client(callback: CallbackQuery, state: FSMContext) -> None:
    """–Ü–Ω—ñ—Ü—ñ—é—î –ø—Ä–æ—Ü–µ—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É."""
    try:
        order_id = str(callback.data.split("_")[2])
        await state.set_state(OrderStates.AWAITING_WORK)
        await state.update_data(order_id=order_id, files=[], messages=[])
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É", callback_data=f"finish_sending_{order_id}")
        keyboard.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_send_{order_id}")
        
        await callback.message.edit_text(
            "üì§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª–∏, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É', –∫–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ",
            reply_markup=keyboard.as_markup()
        )
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–æ–±–æ—Ç–∏: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏", show_alert=True)


@admin_orders_router.message(OrderStates.AWAITING_WORK, F.text)
async def handle_text_for_client(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–ª—ñ—î–Ω—Ç—É."""
    try:
        data = await state.get_data()
        messages = data.get("messages", [])
        messages.append({"type": "text", "content": message.text})
        await state.update_data(messages=messages)
        
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")


@admin_orders_router.message(OrderStates.AWAITING_WORK, F.photo)
async def handle_photo_for_client(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–æ–±–ª—è—î —Ñ–æ—Ç–æ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–ª—ñ—î–Ω—Ç—É."""
    try:
        data = await state.get_data()
        files = data.get("files", [])
        
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à—É –≤–µ—Ä—Å—ñ—é —Ñ–æ—Ç–æ
        file_id = photo.file_id
        
        caption = message.caption if message.caption else ""
        
        files.append({"type": "photo", "file_id": file_id, "caption": caption})
        await state.update_data(files=files)
        
        await message.answer("‚úÖ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ")


@admin_orders_router.message(OrderStates.AWAITING_WORK, F.document)
async def handle_document_for_client(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–æ–±–ª—è—î –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–ª—ñ—î–Ω—Ç—É."""
    try:
        data = await state.get_data()
        files = data.get("files", [])
        
        file_id = message.document.file_id
        caption = message.caption if message.caption else ""
        
        files.append({"type": "document", "file_id": file_id, "caption": caption})
        await state.update_data(files=files)
        
        await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞")


@admin_orders_router.message(OrderStates.AWAITING_WORK, F.video)
async def handle_video_for_client(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–µ–æ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–ª—ñ—î–Ω—Ç—É."""
    try:
        data = await state.get_data()
        files = data.get("files", [])
        
        file_id = message.video.file_id
        caption = message.caption if message.caption else ""
        
        files.append({"type": "video", "file_id": file_id, "caption": caption})
        await state.update_data(files=files)
        
        await message.answer("‚úÖ –í—ñ–¥–µ–æ –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–µ–æ: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ")


@admin_orders_router.message(OrderStates.AWAITING_WORK, F.voice)
async def handle_voice_for_client(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–æ–±–ª—è—î –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–ª—ñ—î–Ω—Ç—É."""
    try:
        data = await state.get_data()
        files = data.get("files", [])
        
        file_id = message.voice.file_id
        
        files.append({"type": "voice", "file_id": file_id})
        await state.update_data(files=files)
        
        await message.answer("‚úÖ –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        
@admin_orders_router.callback_query(F.data.startswith("finish_sending_"))
async def finish_sending_work(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à—É—î –ø—Ä–æ—Ü–µ—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–æ–±–æ—Ç–∏ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –≤—Å—ñ —Ñ–∞–π–ª–∏ –∫–ª—ñ—î–Ω—Ç—É."""
    try:
        order_id = callback.data.split("_")[2]
        data = await state.get_data()
        files = data.get("files", [])
        messages = data.get("messages", [])
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = await database_service.get_by_id('request_order', 'ID_order', order_id)
            
        if not order:
            await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            await state.clear()
            return
        
        client_id = order.ID_user
        send_errors = []
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É
        try:
            await callback.bot.send_message(
                client_id,
                f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤–∏–∫–æ–Ω–∞–Ω–æ!\n\n"
                f"–ù–∏–∂—á–µ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≤—Å—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –≤—ñ–¥ –≤–∏–∫–æ–Ω–∞–≤—Ü—è."
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            send_errors.append("–ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        for i, msg in enumerate(messages):
            if msg["type"] == "text":
                try:
                    await callback.bot.send_message(client_id, msg["content"])
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è #{i+1}: {e}")
                    send_errors.append(f"—Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è #{i+1}")
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–∞–π–ª–∏
        for i, file in enumerate(files):
            try:
                if file["type"] == "photo":
                    await callback.bot.send_photo(
                        client_id, 
                        file["file_id"],
                        caption=file["caption"] if file["caption"] else None
                    )
                elif file["type"] == "document":
                    await callback.bot.send_document(
                        client_id, 
                        file["file_id"],
                        caption=file["caption"] if file["caption"] else None
                    )
                elif file["type"] == "video":
                    await callback.bot.send_video(
                        client_id, 
                        file["file_id"],
                        caption=file["caption"] if file["caption"] else None
                    )
                elif file["type"] == "voice":
                    await callback.bot.send_voice(client_id, file["file_id"])
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É #{i+1} —Ç–∏–ø—É {file['type']}: {e}")
                send_errors.append(f"—Ñ–∞–π–ª #{i+1} ({file['type']})")

        try:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úÖ –í—Å–µ –û–ö", callback_data=f"complete_order_{order_id}")
            keyboard.button(text="‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∫–∏", callback_data=f"fix_work_{order_id}")

            await callback.bot.send_message(
                client_id,
                "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.",
                reply_markup=keyboard.as_markup()
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ (463): {e}")
            await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏", show_alert=True)
        
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        await state.clear()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–æ–±–æ—Ç–∏: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –∫–ª—ñ—î–Ω—Ç—É", show_alert=True)
        await state.clear()

@admin_orders_router.callback_query(F.data.startswith("cancel_send_"))
async def cancel_sending_work(callback: CallbackQuery, state: FSMContext) -> None:
    """–°–∫–∞—Å–æ–≤—É—î –ø—Ä–æ—Ü–µ—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–æ–±–æ—Ç–∏."""
    try:
        order_id = callback.data.split("_")[2]
        
        await callback.message.edit_text(
            f"‚ùå –í—ñ–¥–ø—Ä–∞–≤–∫—É –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )
        
        await state.clear()
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–æ–±–æ—Ç–∏: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏", show_alert=True)
        await state.clear()
        
@admin_orders_router.callback_query(F.data.startswith("complete_order_"))
async def complete_order(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∑–Ω–∞—á–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ."""
    try:
        order_id = str(callback.data.split("_")[2])
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = await database_service.get_by_id('request_order', 'ID_order', order_id)

        worker_id = order.ID_worker
        client_id = order.ID_user

        await order_service.complete_order(order_id)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìã –ú–æ—ó –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="my_orders")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        keyboard.adjust(1)

        await callback.bot.send_message(
            worker_id,
            f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ!",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ!", show_alert=True)

        await callback.bot.send_message(
            client_id,
            text = (
                f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ."
                f" –î—è–∫—É—î–º–æ —â–æ –æ–±–∏—Ä–∞—î—Ç–µ –Ω–∞—Å!"
            )
        )

        await state.clear()

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)

@users_orders_router.message(Command("order"))
async def cmd_order(message: types.Message):
    try:
        if not await database_service.get_by_id('user_data', 'ID', message.from_user.id):
            await message.answer("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
            
        builder = InlineKeyboardBuilder()
        builder.button(text="–¢–∞–∫", callback_data="yes")
        builder.button(text="–ù—ñ", callback_data="no")
        await message.answer(
            "–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥—ñ—é —Ç–∞ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error in order command: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@users_orders_router.callback_query(F.data == "no")
async def callback_no(query: CallbackQuery):
    await query.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ!")
    await query.message.delete()
    await query.message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help, —â–æ–± –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥.")

@users_orders_router.callback_query(F.data == "yes")
async def callback_yes(query: CallbackQuery, state: FSMContext):
    try:
        await query.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ!")
        await query.message.delete()
        await state.set_state(OrderStates.waiting_for_type)
        await query.message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=subject_keyboard())
    except Exception as e:
        logger.error(f"Error in yes callback: {e}")
        await query.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear()

@users_orders_router.callback_query(OrderStates.waiting_for_type)
async def process_subject(callback: CallbackQuery, state: FSMContext):
    try:
        await state.update_data(subject=callback.data)
        await callback.message.answer(
            type_work_text,
            reply_markup=type_work_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_details)
    except Exception as e:
        logger.error(f"Error in process_subject: {e}")
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear()

@users_orders_router.callback_query(OrderStates.waiting_for_details)
async def process_type(callback: CallbackQuery, state: FSMContext):
    try:
        await state.update_data(type_work=callback.data)
        await callback.message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ):"
        )
        await state.set_state(OrderStates.waiting_for_comment)
    except Exception as e:
        logger.error(f"Error in process_type: {e}")
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear()

@users_orders_router.message(OrderStates.waiting_for_comment)
async def process_details(message: Message, state: FSMContext):
    try:
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
        comment = validate_input(message.text, Config.MAX_COMMENT_LENGTH)
        if not comment:
            await message.answer(
                f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–º–∞–∫—Å–∏–º—É–º {Config.MAX_COMMENT_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤)"
            )
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
        data = await state.get_data()
        
        # –ì–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order_data = {
            "subject": data["subject"],
            "type_work": data["type_work"],
        }

        # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É OrderService
        order_service = OrderService() 
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        new_id = await order_service.process_new_order(
            user_id=message.from_user.id,
            username=message.from_user.username or '–ë–µ–∑ –Ω—ñ–∫–Ω–µ–π–º–∞',
            order_data=order_data,
            comment=comment,
            bot=message.bot
        )
        
        # if not new_id:
        #     raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

        await message.answer("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–æ–±–∫—É!")
        await state.clear()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ process_details: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ")
        await state.clear()

# async def get_orders_with_users(self, status: str) -> List[Dict]: # type: ignore
#         """
#         –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–∑–æ–º –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    
#         Args:
#             status: str - —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω—å ('pending', 'completed', etc.)
    
#         Returns:
#             List[Dict] - —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
#         """
    
#         # 1. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
#         orders = await self.get_orders_with_users()
    
#         # 2. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
#         for order in orders:
#             user = await self.get_by_id('user_data', 'ID', order['ID_user'])
        
#             # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
#             if user:
#                 order['user_name'] = user['user_name']
#                 order['user_link'] = user['user_link']
#             else:
#                 # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
#                 order['user_name'] = None
#                 order['user_link'] = None
    
#         return orders

