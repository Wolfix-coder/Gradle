import aiosqlite
import logging
from datetime import datetime

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –í—ñ–¥–Ω–æ—Å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
from utils.decorators import require_admin
from utils.keyboards import get_worker_order_keyboard, subject_keyboard, type_work_keyboard
from services.order_service import OrderService
from states.order_states import OrderStates
from services.database import DatabaseService
from model.order import OrderStatus, Order
from utils.logging import logger
from config import Config
from config import Config as MAX_COMMENT_LENGTH
from config import Config as ADMIN_CHANNEL_ID
from text import type_work_text
from utils.validators import validate_input


# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä
users_orders_router = Router()
admin_orders_router = Router()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å
order_service = OrderService()


@admin_orders_router.callback_query(F.data == "new_orders")
@require_admin
async def show_new_orders(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."""
    try:
        orders = await order_service.get_new_orders()
        
        if not orders:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ–º–∞—î –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
                reply_markup=keyboard.as_markup()
            )
            return

        await callback.message.delete()

        for order in orders:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úÖ –í–∑—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"take_order_{order.ID_order}")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            keyboard.adjust(1)

            order_text = (
                f"üìå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.ID_order}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {order.subject}\n"
                f"üìù –¢–∏–ø —Ä–æ–±–æ—Ç–∏: {order.type_work}\n"
                f"üìã –î–µ—Ç–∞–ª—ñ: {order.order_details}\n"
                f"üë§ –ó–∞–º–æ–≤–Ω–∏–∫: @{order.user_link}\n"
                f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {order.created_at}"
            )

            await callback.message.answer(order_text, reply_markup=keyboard.as_markup())

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {e}")
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        await callback.message.edit_text(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
            reply_markup=keyboard.as_markup()
        )

@admin_orders_router.callback_query(lambda c: c.data == "my_orders")
@require_admin
async def handle_my_orders(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞."""
    await show_worker_orders_handler(callback)

@admin_orders_router.callback_query(lambda c: c.data == "refresh_worker_orders")
@require_admin
async def handle_refresh_orders(callback: CallbackQuery):
    """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞."""
    await show_worker_orders_handler(callback)

@admin_orders_router.callback_query(F.data.startswith("take_order_"))
@require_admin
async def take_order(callback: CallbackQuery) -> None:
    """–û–±—Ä–æ–±–ª—è—î –≤–∑—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ callback –¥–∞–Ω–∏—Ö
        order_id = callback.data.split('_', 2)[2]
        worker_id = callback.from_user.id
        worker_username = callback.from_user.username or '–±–µ–∑_—ñ–º–µ–Ω—ñ'
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ –ë–î
        async with aiosqlite.connect(Config.DATABASE_PATH) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute(
                "SELECT status FROM request_order WHERE ID_order = ?", 
                (order_id,)
            ) as cursor:
                result = await cursor.fetchone()
                
                if not result:
                    logger.warning(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –≤–∑—è—Ç—Ç—è")
                    await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                    return
                
                current_status = result['status']
                logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}: {current_status}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—Ç–∞—Ç—É—Å = 1 (NEW)
                if current_status != 1:
                    logger.info(f"–°–ø—Ä–æ–±–∞ –≤–∑—è—Ç–∏ –≤–∂–µ –≤–∑—è—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {worker_id}")
                    await callback.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∑—è—Ç–æ —ñ–Ω—à–∏–º –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º.", show_alert=True)
                    return
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ 2 (IN_PROGRESS) —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
                try:
                    await db.execute(
                        "UPDATE request_order SET status = 2, ID_worker = ? WHERE ID_order = ?",
                        (worker_id, order_id)
                    )
                    await db.commit()
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {e}")
                    await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∑—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)
                    return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìã –ú–æ—ó –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="my_active_orders")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        keyboard.adjust(1)  # –†–æ–∑–º—ñ—â—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–≤–ø—á–∏–∫

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –≤–∑—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∑—è—Ç–æ –≤ —Ä–æ–±–æ—Ç—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{worker_username}!",
            reply_markup=keyboard.as_markup()
        )
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –≤–∑—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∑—è—Ç–æ!", show_alert=True)
        
        logger.info(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} —É—Å–ø—ñ—à–Ω–æ –≤–∑—è—Ç–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {worker_id} (@{worker_username})")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {e}", exc_info=True)
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)
        
async def get_worker_orders(worker_id: int) -> list:
    """
    –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    
    Args:
        worker_id (int): ID –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å
    """
    try:
        async with aiosqlite.connect(Config.DATABASE_PATH) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute("""
                SELECT 
                    ro.ID_order,
                    ro.subject,
                    ro.type_work,
                    ro.order_details,
                    ro.created_at,
                    ro.status,
                    u.user_name,
                    u.user_link
                FROM request_order ro
                LEFT JOIN users u ON ro.ID_user = u.ID
                WHERE ro.ID_worker = ? 
                AND ro.status IN (?, ?)
                ORDER BY 
                    CASE ro.status 
                        WHEN ? THEN 1 
                        WHEN ? THEN 2 
                    END,
                    ro.created_at DESC
            """, (worker_id, 
                  OrderStatus.IN_PROGRESS.value,
                  OrderStatus.NEW.value,
                  OrderStatus.IN_PROGRESS.value,
                  OrderStatus.NEW.value)) as cursor:
                return [dict(row) for row in await cursor.fetchall()]
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –≤–æ—Ä–∫–µ—Ä–∞: {e}")
        return []

async def show_worker_orders_handler(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞."""
    try:
        worker_id = callback.from_user.id
        orders = await get_worker_orders(worker_id)

        if not orders:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_worker_orders")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
                reply_markup=keyboard.as_markup()
            )
            return

        await callback.message.delete()

        for order in orders:
            order_text = (
                f"üìå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order['ID_order']}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {order['subject']}\n"
                f"üìù –¢–∏–ø —Ä–æ–±–æ—Ç–∏: {order['type_work']}\n"
                f"üë§ –ó–∞–º–æ–≤–Ω–∏–∫: @{order['user_link']}\n"
                f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {order['created_at']}\n"
                f"üìã –î–µ—Ç–∞–ª—ñ: {order['order_details']}\n"
                f"–°—Ç–∞—Ç—É—Å: {'üîÑ –í —Ä–æ–±–æ—Ç—ñ' if order['status'] == OrderStatus.IN_PROGRESS.value else 'üÜï –ù–æ–≤–µ'}"
            )
            
            keyboard = get_worker_order_keyboard(order['ID_order'])
            keyboard.button(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_worker_orders")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            keyboard.adjust(1)
            
            await callback.message.answer(
                order_text,
                reply_markup=keyboard.as_markup()
            )

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –≤–æ—Ä–∫–µ—Ä–∞: {e}")
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        await callback.message.edit_text(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å.",
            reply_markup=keyboard.as_markup()
        )

@admin_orders_router.callback_query(F.data.startswith("send_work_"))
async def send_work_to_client(callback: CallbackQuery, state: FSMContext) -> None:
    """–Ü–Ω—ñ—Ü—ñ—é—î –ø—Ä–æ—Ü–µ—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É."""
    try:
        order_id = str(callback.data.split("_")[1])
        await state.set_state(OrderStates.AWAITING_WORK)
        await state.update_data(order_id=order_id, files=[])
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É", callback_data=f"finish_sending_{order_id}")
        keyboard.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_send_{order_id}")
        
        await callback.message.edit_text(
            "üì§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª–∏, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É', –∫–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ",
            reply_markup=keyboard.as_markup()
        )
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–æ–±–æ—Ç–∏: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏", show_alert=True)

@admin_orders_router.callback_query(F.data.startswith("complete_order_"))
@require_admin
async def complete_order(callback: CallbackQuery) -> None:
    """–ü–æ–∑–Ω–∞—á–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ."""
    try:
        order_id = str(callback.data.split("_")[1])
        worker_id = callback.from_user.id
        
        await order_service.complete_order(order_id)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìã –ú–æ—ó –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="my_active_orders")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        keyboard.adjust(1)

        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ!",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ!", show_alert=True)

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)

@users_orders_router.message(Command("order"))
async def cmd_order(message: types.Message):
    try:
        if not await DatabaseService.check_user_exists(message.from_user.id):
            await message.answer("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
            
        builder = InlineKeyboardBuilder()
        builder.button(text="–¢–∞–∫", callback_data="yes")
        builder.button(text="–ù—ñ", callback_data="no")
        await message.answer(
            "–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥—ñ—é —Ç–∞ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error in order command: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@users_orders_router.callback_query(F.data == "no")
async def callback_no(query: CallbackQuery):
    await query.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ!")
    await query.message.delete()
    await query.message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help, —â–æ–± –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥.")

@users_orders_router.callback_query(F.data == "yes")
async def callback_yes(query: CallbackQuery, state: FSMContext):
    try:
        await query.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ!")
        await query.message.delete()
        await state.set_state(OrderStates.waiting_for_type)
        await query.message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=subject_keyboard())
    except Exception as e:
        logger.error(f"Error in yes callback: {e}")
        await query.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear()

@users_orders_router.callback_query(OrderStates.waiting_for_type)
async def process_subject(callback: CallbackQuery, state: FSMContext):
    try:
        await state.update_data(subject=callback.data)
        await callback.message.answer(
            type_work_text,
            reply_markup=type_work_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_details)
    except Exception as e:
        logger.error(f"Error in process_subject: {e}")
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear()

@users_orders_router.callback_query(OrderStates.waiting_for_details)
async def process_type(callback: CallbackQuery, state: FSMContext):
    try:
        await state.update_data(type_work=callback.data)
        await callback.message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ):"
        )
        await state.set_state(OrderStates.waiting_for_comment)
    except Exception as e:
        logger.error(f"Error in process_type: {e}")
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear()

@users_orders_router.message(OrderStates.waiting_for_comment)
async def process_details(message: Message, state: FSMContext):
    try:
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
        comment = validate_input(message.text, Config.MAX_COMMENT_LENGTH)
        if not comment:
            await message.answer(
                f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–º–∞–∫—Å–∏–º—É–º {Config.MAX_COMMENT_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤)"
            )
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
        data = await state.get_data()
        
        # –ì–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ –ø–æ–ª—ñ–≤
        order_data = {
            "ID_user": message.from_user.id,  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–µ–ª–∏–∫–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä
            "subject": data["subject"],
            "type_work": data["type_work"],
            "order_details": comment,
            "status": OrderStatus.NEW.value,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ enum
            "created_at": datetime.now().isoformat()
        }
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
        new_id = await order_service.create_order(order_data)
        if not new_id:
            raise ValueError("Failed to create order")

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        builder = InlineKeyboardBuilder()
        builder.button(
            text="–í–∑—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", 
            callback_data=f"take_order_{new_id}"
        )
        
        admin_message = (
            f"--- –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ---\n"
            f"<b>–ß–∞—Å:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"<b>ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {new_id}\n"
            f"<b>–í—ñ–¥:</b> @{message.from_user.username or '–ë–µ–∑ –Ω—ñ–∫–Ω–µ–π–º–∞'}\n"
            f"<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {data['subject']}\n"
            f"<b>–¢–∏–ø —Ä–æ–±–æ—Ç–∏:</b> {data['type_work']}\n"
            f"<b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {comment}\n"
            f"---------------------------"
        )
        
        await message.bot.send_message(
            Config.ADMIN_CHANNEL_ID,
            admin_message,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
        await message.answer("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–æ–±–∫—É!")
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in process_details: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear()