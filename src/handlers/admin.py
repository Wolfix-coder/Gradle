import re

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from services.admin_service import AdminService
from services.database_service import DatabaseService
from services.order_service import OrderService
from utils.decorators import require_admin
from utils.keyboards import get_admin_keyboard
from utils.logging import logger

import logging

admin_router = Router(name='admin')

admin_service = AdminService()
database_service = DatabaseService()
order_service = OrderService()

@admin_router.message(Command("admin"))
@require_admin
async def show_admin_panel(message: Message) -> None:
    await message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:",
        reply_markup=get_admin_keyboard().as_markup()
    )

@admin_router.callback_query(F.data == "back_to_admin")
@require_admin
async def back_to_admin(callback: CallbackQuery) -> None:
    try:
        await callback.message.edit_text(
            "üîß –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏\n"
            "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:",
            reply_markup=get_admin_keyboard().as_markup()
        )
    except Exception as e:
        logging.error(f"Error returning to admin panel: {e}")
        await callback.answer("Error returning to menu", show_alert=True)

@admin_router.message(Command("status"))
@require_admin
async  def status_order(message: Message) -> None:
    try:
        text = message.text
        args = admin_service.parse_command(text)
        
        if not args:
            await message.answer(text=(
                f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏!\n"
                f"–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —â–µ —Ä–∞–∑ –∑ –æ–¥–Ω–∏–º –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:\n"
                f"-order_id ### - –ø–æ—à—É–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ –ÜD –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è;\n"
                f"-order_status # - –ø–æ—à—É–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ —Å—Ç–∞—Ç—É—Å—É —Ä–æ–±–æ—Ç–∏;\n"
                f"-pay_status # - –ø–æ—à—É–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏;\n"
                f"-user ### - –ø–æ—à—É–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ ID –∫–ª—ñ—î–Ω—Ç–∞.\n"
            ))
            return
        
        order_id = args.get('order_id')
        filters_order_status = args.get('order_status')
        filters_pay_status = args.get('pay_status')  
        filters_user = args.get('user')

        logger.debug(f"args = {args}")

        if order_id:
            order = await database_service.get_by_id('order_request', 'ID_order', order_id)
            payment = await database_service.get_by_id('payments', 'ID_order', order_id)
            text_message = admin_service.generate_message(order['ID_order'], order['ID_user'], order['ID_worker'], order['subject'], order['type_work'], order['order_details'], payment['price'], order['status'], payment['status'])

            await message.answer(text=text_message, parse_mode='HTML')
        elif filters_order_status:
            try:
                logger.info(f"–®—É–∫–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º: {filters_order_status}")

                # 1. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º  
                orders = await database_service.get_all_by_field('order_request', 'status', filters_order_status)
                logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {len(orders)}")

                if not orders:
                    await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω—å –∑ —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                    return

                # 2. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º—É—î–º–æ –ø–ª–∞—Ç–µ–∂—ñ
                for i, order in enumerate(orders):
                    logger.info(f"–û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {i+1}: {order}")

                    order_id = order['ID_order']
                    logger.info(f"ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}")

                    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–ª–∞—Ç–µ–∂—ñ –¥–ª—è —Ü—å–æ–≥–æ ID_order
                    payments = await database_service.get_all_by_field('payments', 'ID_order', order_id)
                    logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂—ñ–≤: {len(payments)}")
                    logger.info(f"–ü–ª–∞—Ç–µ–∂—ñ: {payments}")

                    # –Ø–∫—â–æ —î –ø–ª–∞—Ç–µ–∂—ñ
                    if payments:
                        for j, payment in enumerate(payments):
                            logger.info(f"–û–±—Ä–æ–±–ª—è—î–º–æ –ø–ª–∞—Ç—ñ–∂ {j+1}: {payment}")

                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è
                            if 'price' not in payment:
                                logger.error(f"–ü–æ–ª–µ 'price' –≤—ñ–¥—Å—É—Ç–Ω—î –≤ –ø–ª–∞—Ç–µ–∂—ñ: {payment}")
                                continue
                            if 'status' not in payment:
                                logger.error(f"–ü–æ–ª–µ 'status' –≤—ñ–¥—Å—É—Ç–Ω—î –≤ –ø–ª–∞—Ç–µ–∂—ñ: {payment}")
                                continue
                            
                            text_message = admin_service.generate_message(
                                order['ID_order'], 
                                order['ID_user'], 
                                order['ID_worker'], 
                                order['subject'], 
                                order['type_work'], 
                                order['order_details'], 
                                payment['price'],
                                order['status'], 
                                payment['status']
                            )
                            logger.info("–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
                            await message.answer(text=text_message, parse_mode='HTML')
                    else:
                        logger.info("–ü–ª–∞—Ç–µ–∂—ñ–≤ –Ω–µ–º–∞—î, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó")
                        await message.answer("–ü–ª–∞—Ç–µ–∂—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
                logger.error(f"–¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e)}")
                import traceback
                logger.error(f"–ü–æ–≤–Ω–∏–π traceback: {traceback.format_exc()}")
                await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å!")
        elif filters_pay_status:
                    pass
        elif filters_user:
            pass



    except Exception as e:
        logger.error(f"eroor: {e}")
        raise