from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder


from services.database_service import DatabaseService
from utils.decorators import require_admin
from utils.logging import logger
from utils.keyboards import get_admin_keyboard

from config import Config

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ—É—Ç–µ—Ä—ñ–≤
statistics_router = Router(name='statistics')

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ —Å–µ—Ä–≤—ñ—Å—ñ–≤
database_service = DatabaseService()

@statistics_router.callback_query(lambda c: c.data == "my_statistics")
@require_admin
async def show_statistics(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    try:
        worker_id = callback.from_user.id
        
        
        stats = await database_service.get_worker_statistics(worker_id)
        
        stats_text = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚úÖ –í—Å—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {stats['total_completed']}\n"
            f"üìù –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {stats['active_orders']}\n\n"
            f"üìö –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç—ñ–≤:\n"
        )

        for subject, count in stats['top_subjects']:
            stats_text += f"- {subject}: {count} –∑–∞–º–æ–≤–ª–µ–Ω—å\n"

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")

        await callback.message.edit_text(
            stats_text,
            reply_markup=keyboard.as_markup()
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.edit_text(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_keyboard().as_markup()
        )

class OrderServicePayments:
    def __init__(self):
        self.db_path = Config.DATABASE_PATH

    