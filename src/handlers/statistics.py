import logging
import aiosqlite

from aiogram import Router, types
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from typing import Dict, List, Tuple
from datetime import datetime

from utils.decorators import require_admin
from services.order_service import OrderService
from utils.keyboards import get_admin_keyboard

from model.order import Order, OrderStatus
from config import Config

statistics_router = Router(name='statistics')

@statistics_router.callback_query(lambda c: c.data == "my_statistics")
@require_admin
async def show_statistics(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    try:
        worker_id = callback.from_user.id
        order_service = OrderService()
        
        stats = await order_service.get_worker_statistics(worker_id)
        
        stats_text = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚úÖ –í—Å—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {stats['total_completed']}\n"
            f"üìù –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {stats['active_orders']}\n\n"
            f"üìö –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç—ñ–≤:\n"
        )

        for subject, count in stats['top_subjects']:
            stats_text += f"- {subject}: {count} –∑–∞–º–æ–≤–ª–µ–Ω—å\n"

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")

        await callback.message.edit_text(
            stats_text,
            reply_markup=keyboard.as_markup()
        )

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.edit_text(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_keyboard().as_markup()
        )

class OrderService:
    def __init__(self):
        self.db_path = Config.DATABASE_PATH

    async def get_worker_statistics(self, worker_id: int) -> Dict:
        """
        –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞.
        
        Args:
            worker_id (int): ID –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞
            
        Returns:
            Dict: –°–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é, —â–æ –º—ñ—Å—Ç–∏—Ç—å:
                - total_completed: –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
                - active_orders: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
                - top_subjects: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ (–ø—Ä–µ–¥–º–µ—Ç, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å)
        """
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
                async with db.execute("""
                    SELECT COUNT(*) as count 
                    FROM request_order 
                    WHERE ID_worker = ? AND status = ?
                """, (worker_id, OrderStatus.COMPLETED.value)) as cursor:
                    completed = await cursor.fetchone()
                    total_completed = completed['count']

                # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
                async with db.execute("""
                    SELECT COUNT(*) as count 
                    FROM request_order 
                    WHERE ID_worker = ? AND status = ?
                """, (worker_id, OrderStatus.IN_PROGRESS.value)) as cursor:
                    active = await cursor.fetchone()
                    active_orders = active['count']

                # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
                async with db.execute("""
                    SELECT subject, COUNT(*) as count 
                    FROM request_order 
                    WHERE ID_worker = ? AND status = ?
                    GROUP BY subject 
                    ORDER BY count DESC 
                    LIMIT 5
                """, (worker_id, OrderStatus.COMPLETED.value)) as cursor:
                    subjects = await cursor.fetchall()
                    top_subjects = [(row['subject'], row['count']) for row in subjects]

                return {
                    'total_completed': total_completed,
                    'active_orders': active_orders,
                    'top_subjects': top_subjects
                }
                
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ {worker_id}: {e}")
            raise